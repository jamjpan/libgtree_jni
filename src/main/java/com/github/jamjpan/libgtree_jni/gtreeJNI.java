/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.github.jamjpan.libgtree_jni;

public class gtreeJNI {
  public static void setData_id(int value) {
    gtreeJNIJNI.data_id_set(value);
  }

  public static int getData_id() {
    return gtreeJNIJNI.data_id_get();
  }

  public static void setDatasets(SWIGTYPE_p_std__vectorT_std__string_t value) {
    gtreeJNIJNI.datasets_set(SWIGTYPE_p_std__vectorT_std__string_t.getCPtr(value));
  }

  public static SWIGTYPE_p_std__vectorT_std__string_t getDatasets() {
    long cPtr = gtreeJNIJNI.datasets_get();
    return (cPtr == 0) ? null : new SWIGTYPE_p_std__vectorT_std__string_t(cPtr, false);
  }

  public static void setGraph_path(String value) {
    gtreeJNIJNI.graph_path_set(value);
  }

  public static String getGraph_path() {
    return gtreeJNIJNI.graph_path_get();
  }

  public static void setQuery_path(String value) {
    gtreeJNIJNI.query_path_set(value);
  }

  public static String getQuery_path() {
    return gtreeJNIJNI.query_path_get();
  }

  public static void setIndex_path(String value) {
    gtreeJNIJNI.index_path_set(value);
  }

  public static String getIndex_path() {
    return gtreeJNIJNI.index_path_get();
  }

  public static void setMAX_LEAF_SIZE(long value) {
    gtreeJNIJNI.MAX_LEAF_SIZE_set(value);
  }

  public static long getMAX_LEAF_SIZE() {
    return gtreeJNIJNI.MAX_LEAF_SIZE_get();
  }

  public static void setFANOUT(long value) {
    gtreeJNIJNI.FANOUT_set(value);
  }

  public static long getFANOUT() {
    return gtreeJNIJNI.FANOUT_get();
  }

  public static void setVEX_ID_START_WITH_ZERO(boolean value) {
    gtreeJNIJNI.VEX_ID_START_WITH_ZERO_set(value);
  }

  public static boolean getVEX_ID_START_WITH_ZERO() {
    return gtreeJNIJNI.VEX_ID_START_WITH_ZERO_get();
  }

  public static void setDIRECTED_GRAPH(boolean value) {
    gtreeJNIJNI.DIRECTED_GRAPH_set(value);
  }

  public static boolean getDIRECTED_GRAPH() {
    return gtreeJNIJNI.DIRECTED_GRAPH_get();
  }

  public static void setForest_Speed_Up_Query(boolean value) {
    gtreeJNIJNI.Forest_Speed_Up_Query_set(value);
  }

  public static boolean getForest_Speed_Up_Query() {
    return gtreeJNIJNI.Forest_Speed_Up_Query_get();
  }

  public static void setVERBOSE(boolean value) {
    gtreeJNIJNI.VERBOSE_set(value);
  }

  public static boolean getVERBOSE() {
    return gtreeJNIJNI.VERBOSE_get();
  }

  public static void setDISP_FREQ(long value) {
    gtreeJNIJNI.DISP_FREQ_set(value);
  }

  public static long getDISP_FREQ() {
    return gtreeJNIJNI.DISP_FREQ_get();
  }

  public static SWIGTYPE_p_std__ostream __put__(SWIGTYPE_p_std__ostream out, Node arg1) {
    return new SWIGTYPE_p_std__ostream(gtreeJNIJNI.__put__(SWIGTYPE_p_std__ostream.getCPtr(out), Node.getCPtr(arg1), arg1), false);
  }

  public static String node2tring(Node node) {
    return gtreeJNIJNI.node2tring(Node.getCPtr(node), node);
  }

  public static int dijkstra(int s, Graph G, SWIGTYPE_p_std__vectorT_long_t dists) {
    return gtreeJNIJNI.dijkstra__SWIG_0(s, Graph.getCPtr(G), G, SWIGTYPE_p_std__vectorT_long_t.getCPtr(dists));
  }

  public static SWIGTYPE_p_pairT_int_long_t dijkstra(int s, int t, Graph G, IntVector prevs) {
    return new SWIGTYPE_p_pairT_int_long_t(gtreeJNIJNI.dijkstra__SWIG_1(s, t, Graph.getCPtr(G), G, IntVector.getCPtr(prevs), prevs), true);
  }

  public static SWIGTYPE_p_pairT_int_long_t dijkstra(int s, int t, Graph G) {
    return new SWIGTYPE_p_pairT_int_long_t(gtreeJNIJNI.dijkstra__SWIG_2(s, t, Graph.getCPtr(G), G), true);
  }

  public static void SPSP_Generator(String inPath, String outPath) {
    gtreeJNIJNI.SPSP_Generator__SWIG_0(inPath, outPath);
  }

  public static void SPSP_Generator(String inPath) {
    gtreeJNIJNI.SPSP_Generator__SWIG_1(inPath);
  }

  public static void SPSP_Generator() {
    gtreeJNIJNI.SPSP_Generator__SWIG_2();
  }

  public static void write_matrix(SWIGTYPE_p_std__ofstream os, Matrix mat) {
    gtreeJNIJNI.write_matrix(SWIGTYPE_p_std__ofstream.getCPtr(os), Matrix.getCPtr(mat), mat);
  }

  public static void read_matrix(SWIGTYPE_p_std__ifstream is, Matrix mat) {
    gtreeJNIJNI.read_matrix(SWIGTYPE_p_std__ifstream.getCPtr(is), Matrix.getCPtr(mat), mat);
  }

  public static void write_tree_node(SWIGTYPE_p_std__ofstream os, Node node) {
    gtreeJNIJNI.write_tree_node(SWIGTYPE_p_std__ofstream.getCPtr(os), Node.getCPtr(node), node);
  }

  public static void read_tree_node(SWIGTYPE_p_std__ifstream is, Node node) {
    gtreeJNIJNI.read_tree_node(SWIGTYPE_p_std__ifstream.getCPtr(is), Node.getCPtr(node), node);
  }

  public static void write_GTree(GTree tree) {
    gtreeJNIJNI.write_GTree(GTree.getCPtr(tree), tree);
  }

  public static void read_GTree(GTree tree) {
    gtreeJNIJNI.read_GTree(GTree.getCPtr(tree), tree);
  }

  public static void recover_path_from_prevs(SWIGTYPE_p_std__ostream out, int s, int d, IntVector prevs) {
    gtreeJNIJNI.recover_path_from_prevs__SWIG_0(SWIGTYPE_p_std__ostream.getCPtr(out), s, d, IntVector.getCPtr(prevs), prevs);
  }

  public static void recover_path_from_prevs(int s, int d, IntVector prevs, IntVector path_record) {
    gtreeJNIJNI.recover_path_from_prevs__SWIG_1(s, d, IntVector.getCPtr(prevs), prevs, IntVector.getCPtr(path_record), path_record);
  }

}
