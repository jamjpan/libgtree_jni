/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.github.jamjpan.libgtree_jni;

public class GTree {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected GTree(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(GTree obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        gtreeJNIJNI.delete_GTree(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public void setNodes_num(int value) {
    gtreeJNIJNI.GTree_nodes_num_set(swigCPtr, this, value);
  }

  public int getNodes_num() {
    return gtreeJNIJNI.GTree_nodes_num_get(swigCPtr, this);
  }

  public void setNodes(Node value) {
    gtreeJNIJNI.GTree_nodes_set(swigCPtr, this, Node.getCPtr(value), value);
  }

  public Node getNodes() {
    long cPtr = gtreeJNIJNI.GTree_nodes_get(swigCPtr, this);
    return (cPtr == 0) ? null : new Node(cPtr, false);
  }

  public void setGid2leafid(SWIGTYPE_p_unordered_mapT_int_int_t value) {
    gtreeJNIJNI.GTree_gid2leafid_set(swigCPtr, this, SWIGTYPE_p_unordered_mapT_int_int_t.getCPtr(value));
  }

  public SWIGTYPE_p_unordered_mapT_int_int_t getGid2leafid() {
    return new SWIGTYPE_p_unordered_mapT_int_int_t(gtreeJNIJNI.GTree_gid2leafid_get(swigCPtr, this), true);
  }

  public void setTree_build_time(long value) {
    gtreeJNIJNI.GTree_tree_build_time_set(swigCPtr, this, value);
  }

  public long getTree_build_time() {
    return gtreeJNIJNI.GTree_tree_build_time_get(swigCPtr, this);
  }

  public GTree() {
    this(gtreeJNIJNI.new_GTree(), true);
  }

  public void sync_b2child_nodes(int p) {
    gtreeJNIJNI.GTree_sync_b2child_nodes(swigCPtr, this, p);
  }

  public void build_node(int p) {
    gtreeJNIJNI.GTree_build_node(swigCPtr, this, p);
  }

  public void build_nodes() {
    gtreeJNIJNI.GTree_build_nodes(swigCPtr, this);
  }

  public void build_node_matrices() {
    gtreeJNIJNI.GTree_build_node_matrices(swigCPtr, this);
  }

  public void buildTree() {
    gtreeJNIJNI.GTree_buildTree(swigCPtr, this);
  }

  public void pushBordersUp(int lfS, int LCA, int fwd_snode) {
    gtreeJNIJNI.GTree_pushBordersUp(swigCPtr, this, lfS, LCA, fwd_snode);
  }

  public void pushBordersDown(int lfT, int LCA, SWIGTYPE_p_stackT_int_t down, int T_) {
    gtreeJNIJNI.GTree_pushBordersDown(swigCPtr, this, lfT, LCA, SWIGTYPE_p_stackT_int_t.getCPtr(down), T_);
  }

  public int findLCA(int x, int y, SWIGTYPE_p_stackT_int_t down) {
    return gtreeJNIJNI.GTree_findLCA__SWIG_0(swigCPtr, this, x, y, SWIGTYPE_p_stackT_int_t.getCPtr(down));
  }

  public int findLCA(int x, int y) {
    return gtreeJNIJNI.GTree_findLCA__SWIG_1(swigCPtr, this, x, y);
  }

  public int shortest_path_querying(int S, int T) {
    return gtreeJNIJNI.GTree_shortest_path_querying(swigCPtr, this, S, T);
  }

  public void find_path_recur(int p, int S, int T, IntVector raw_path) {
    gtreeJNIJNI.GTree_find_path_recur(swigCPtr, this, p, S, T, IntVector.getCPtr(raw_path), raw_path);
  }

  public void path_recovery(int S, int T, IntVector path, int LCA) {
    gtreeJNIJNI.GTree_path_recovery__SWIG_0(swigCPtr, this, S, T, IntVector.getCPtr(path), path, LCA);
  }

  public void path_recovery(int S, int T, IntVector path) {
    gtreeJNIJNI.GTree_path_recovery__SWIG_1(swigCPtr, this, S, T, IntVector.getCPtr(path), path);
  }

  public long max_parti_size(Graph G) {
    return gtreeJNIJNI.GTree_max_parti_size(swigCPtr, this, Graph.getCPtr(G), G);
  }

}
